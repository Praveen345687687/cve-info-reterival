import React, { useEffect, useMemo, useState } from "react";
import Pagination from "./src/components/pagination";
import cve_api from "./src/utils/cve_api";
import { Dateconvert } from "./src/utils/Dateconvert";
import CVEDetails from "./src/components/cveDetailsApi";

export default function Appo() {
  const [currentPage, setCurrentPage] = useState(1);
  const [data, setData] = useState([]);
  const [pageSize, setPageSize] = useState(10);
  const [loading, setLoading] = useState(true);
  const [selectedCVE, setSelectedCVE] = useState(null); // Track selected CVE
  const [selectedIndex, setSelectedIndex] = useState(null); // Track selected index

  useEffect(() => {
    fetchData();
  }, [currentPage, pageSize]); // Fetch data when currentPage or pageSize changes

  const fetchData = async () => {
    setLoading(true); // Set loading state
    try {
      const responseData = await cve_api();
      setData(responseData);
    } catch (error) {
      console.error('Error fetching data:', error);
    } finally {
      setLoading(false); // Reset loading state
    }
  };

  const handlePageSizeChange = (size) => {
    setPageSize(size);
    setCurrentPage(1); // Reset current page when changing page size
  };

  const handleRowClick = (index) => {
    setSelectedIndex(index);
    setSelectedCVE(data.vulnerabilities[index]); // Set selected CVE based on index
  };

  const currentTableData = useMemo(() => {
    const vulnerabilities = data?.vulnerabilities || []; // Use optional chaining to handle potential undefined data
    const firstPageIndex = (currentPage - 1) * pageSize;
    const lastPageIndex = firstPageIndex + pageSize;
    return vulnerabilities.slice(firstPageIndex, lastPageIndex);
  }, [currentPage, data, pageSize]);

  // Calculate the range of records displayed
  const firstRecordIndex = (currentPage - 1) * pageSize + 1;
  const lastRecordIndex = Math.min(firstRecordIndex + pageSize - 1, data.totalResults);

  return (
    <>
      {selectedCVE ? (
        <CVEDetails selectedItem={selectedCVE} />
      ) : (
        <>
          {loading ? (
            <div><h1>Loading...</h1></div>
          ) : (
            <>
              <div>Total Records: {data.totalResults}</div>
              <table id="cvetable" style={{ width: '77%', border: '2px solid black'}}>
                <thead>
                  <tr id="cvetr" >
                    <th style={{border: '2px solid black'}} >CVE ID</th>
                    <th style={{border: '2px solid black'}} >SOURCE IDENTIFIER</th>
                    <th style={{border: '2px solid black'}} >PUBLISHED</th>
                    <th style={{border: '2px solid black'}}>LAST MODIFIED</th>
                    <th style={{border: '2px solid black'}} >STATUS</th>
                  </tr>
                </thead>
                <tbody>
                  {currentTableData.map((item, index) => {
                    return (
                      <tr 
                        key={index}
                        onClick={() => handleRowClick(index)}
                        onMouseEnter={() => setSelectedIndex(index)} // Set selected index on mouse enter
                        onMouseLeave={() => setSelectedIndex(null)} // Reset selected index on mouse leave
                        style={{
                          backgroundColor: selectedIndex === index ? "lightgrey" : "inherit",
                          cursor: "pointer"
                        }}
                      >
                        <td style={{border: '2px solid black',alignItems:'center'}}>{item.cve.id}</td>
                        <td style={{border: '2px solid black',}}>{item.cve.sourceIdentifier}</td>
                        <td style={{border: '2px solid black',}}>{Dateconvert(item.cve.published)}</td>
                        <td style={{border: '2px solid black', }}>{Dateconvert(item.cve.lastModified)}</td>
                        <td style={{border: '2px solid black'}}>{item.cve.vulnStatus}</td>
                      </tr>
                    );
                  })}
                </tbody>
              </table>
              <div style={{ width: '70%', margin: '20px auto 0 auto',display: 'flex', justifyContent: 'space-between', alignItems:'center' }}>
                <div style={{ position: 'absolute', left: 0 }}>Results per page:
                  <select
                    value={pageSize}
                    onChange={(e) => handlePageSizeChange(Number(e.target.value))}
                  >
                    <option value={10}>10</option>
                    <option value={50}>50</option>
                    <option value={100}>100</option>
                  </select>
                </div>
                <span  style={{ flexGrow: 1, textAlign: 'center' }}>
                  {firstRecordIndex}-{lastRecordIndex} of {data.totalResults} Records
                </span>
                <div style={{ flexGrow: 1, textAlign: 'right'}}>
                  <Pagination
                    className="pagination-bar"
                    currentPage={currentPage}
                    totalCount={data.totalResults}
                    pageSize={pageSize}
                    onPageChange={(page) => setCurrentPage(page)}
                  />
                </div>
              </div>
            </>
          )}
        </>
      )}
    </>
  );
};


